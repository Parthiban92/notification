{"version":3,"sources":["logo.svg","Content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Content","props","state","notify_data","fetch","then","res","json","data","setState","userList","catch","console","log","className","this","filter","user","match","params","id","map","data_val","title","Component","App","toggle","bind","todos","length","e","href","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","todo","style","backgroundColor","completed","to","onClick","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,+ICEtBC,G,8DACnB,WAAYC,GAAO,IAAD,8BACX,cAAMA,IACFC,MAAQ,CAACC,YAAa,IAFf,E,gEAMK,IAAD,OAEpBC,MAAM,6CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAEC,SAAUF,OAK3BG,MAAMC,QAAQC,O,+BAEN,IAAD,OACJ,OACA,yBAAKC,UAAU,mBACLC,KAAKb,MAAMC,YAAYa,QAAO,SAAAC,GAAI,OAAI,EAAKhB,MAAMiB,MAAMC,OAAOC,IAAIH,EAAKG,MAAIC,KAAI,SAAAC,GAAQ,OAEpF,2BAAIA,EAASC,e,GAxBGC,c,eC+FtBC,E,kDA1Fb,aAAc,IAAD,8BAEN,gBAEQC,OAAS,EAAKA,OAAOC,KAAZ,gBAEd,EAAKzB,MAAQ,CAAC0B,MAAO,GAAGC,OAAQ,GAN7B,E,gEAYQ,IAAD,OAElBzB,MAAM,6CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAEmB,MAAOpB,OAGxBG,MAAMC,QAAQC,O,6BAGTiB,GAEAf,KAAKN,SAAS,CAAEoB,OAAQd,KAAKb,MAAM0B,MAAMC,W,+BAKvC,IAAD,OAEP,OACG,kBAAC,IAAD,KACD,6BACK,yBAAKf,UAAU,0DACX,wBAAIA,UAAU,sBACV,wBAAIA,UAAU,mBACZ,+BAAI,4CAAJ,OAIP,wBAAIA,UAAU,sBACV,wBAAIA,UAAU,wCACV,uBAAGA,UAAU,2BAA2BiB,KAAK,IAAIX,GAAG,iBAAiBY,KAAK,SAASC,cAAY,WAAWC,gBAAc,OAAOC,gBAAc,SACzI,uBAAGrB,UAAU,sBACb,0BAAMA,UAAU,oCAAqCC,KAAKb,MAAM0B,MAAMC,SAG5E,yBAAKf,UAAU,gGAAgGsB,kBAAgB,kBAC3H,wBAAItB,UAAU,gCAAd,uBACGC,KAAKb,MAAM0B,MAAMZ,QAAO,SAAAC,GAAI,OAAIA,EAAKG,IAAM,EAAKlB,MAAM2B,UAAQR,KAAI,SAAAgB,GAAI,OAErE,uBAAGvB,UAAU,0CAA0CiB,KAAK,KAC1D,yBAAKjB,UAAU,QACX,yBAAKA,UAAU,0BACT,uBAAGA,UAAU,+BAGvB,yBAAMwB,MAAQ,CAACC,gBAAgBF,EAAKG,UAAY,UAAW,KACzD,kBAAC,IAAD,CAAO1B,UAAU,WAAW2B,GAAE,mBAAcJ,EAAKjB,KAAM,yBAAKN,UAAU,yBACjEuB,EAAKd,WAIlB,uBAAGT,UAAU,gDAAgD4B,QAAS3B,KAAKW,QAA3E,6BAKhB,yBAAKZ,UAAU,aACV,yBAAKA,UAAU,yBACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,eAAeC,UAAW7C,OAKpD,4BAAQc,UAAU,+BACX,iD,GAhFAU,aCMEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/B,MACvB,2D,wBCTNgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdhD,OAAM,SAAAiD,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.2b7d21c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nexport default class Content extends Component {\r\n\t constructor(props){\r\n         super(props);\r\n        this.state = {notify_data: []}\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n   \r\n    fetch('http://jsonplaceholder.typicode.com/todos')\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      this.setState({ userList: data })\r\n      // alert(this.state.todos)\r\n      // console.log(this.state.todos)\r\n\r\n    })\r\n    .catch(console.log)\r\n  }\r\n    render(){\r\n        return (\r\n        <div className=\"container-fluid\">\r\n                 {this.state.notify_data.filter(user => this.props.match.params.id==user.id).map(data_val => (\r\n                    \r\n                     <p>{data_val.title}</p> \r\n                   \r\n                  ))}\r\n        \r\n      </div>\r\n    )}\r\n  }\r\n   ","import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react';\nimport Content from './Content';\nimport {BrowserRouter as Router,Switch,Route,Redirect,Link} from \"react-router-dom\";\n\nclass App extends Component {\n  constructor(){\n\n         super();\n           \n            this.toggle = this.toggle.bind(this);\n           \n            this.state = {todos: [],length: 3}\n           \n    }\n\n\n\n  componentDidMount() {\n   \n    fetch('http://jsonplaceholder.typicode.com/todos')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ todos: data})\n     \n    })\n    .catch(console.log)\n  }\n\n   toggle(e) {\n        \n          this.setState({ length: this.state.todos.length})\n    \n    }\n\n \n  render() {\n\n    return (\n       <Router>\n      <div>\n           <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary rounded\">\n               <ul className=\"navbar-nav mr-auto\">\n                   <li className=\"nav-item active\">\n                     <a> <h4>Notification</h4> </a>\n                  </li>\n                      \n             </ul>\n              <ul className=\"navbar-nav ml-auto\">\n                  <li className=\"nav-item dropdown no-arrow mx-1 show\">\n                      <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"alertsDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                          <i className=\"fas fa-bell fa-fw\"></i>\n                          <span className=\"badge badge-danger badge-counter\">{ this.state.todos.length}</span>\n                      </a>\n            \n                    <div className=\"dropdown-list dropdown-menu notification-content dropdown-menu-right shadow animated--grow-in\" aria-labelledby=\"alertsDropdown\">\n                        <h6 className=\"dropdown-header text-center \">Notification Center</h6>\n                        {  this.state.todos.filter(user => user.id <= this.state.length).map(todo => (\n\n                            <a className=\"dropdown-item d-flex align-items-center\" href=\"#\">\n                              <div className=\"mr-3\">\n                                  <div className=\"icon-circle bg-success\">\n                                        <i className=\"fas fa-donate text-white\"></i>\n                                  </div>\n                              </div>\n                              <div  style={ {backgroundColor:todo.completed ? '#D3D3D3': ''}}>\n                                <Link  className=\"nav-link\" to={`/Content/${todo.id}`}><div className=\"small text-gray-500\"></div></Link>\n                                    {todo.title}\n                              </div>\n                            </a>\n                 ))}\n                        <a className=\"dropdown-item text-center small text-gray-500\" onClick={this.toggle}>Show All Notification</a>\n                     </div>\n                </li>\n          </ul>\n        </nav>\n        <div className=\"jumbotron\">\n             <div className=\"container text-center\">\n               <Switch>\n                   <Route exact path=\"/Content/:id\" component={Content}></Route>\n               </Switch>\n        </div>\n      </div>\n  \n           <footer className=\"container-fluid text-center\">\n                  <p>Footer Text</p>\n            </footer>\n    </div>     \n  < /Router>\n      );\n  \n  }\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport $ from 'jquery';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}